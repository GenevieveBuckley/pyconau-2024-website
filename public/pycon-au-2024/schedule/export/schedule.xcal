<?xml version='1.0' encoding='utf-8' ?>
<iCalendar xmlns:pentabarf='http://pentabarf.org' xmlns:xCal='urn:ietf:params:xml:ns:xcal'>
    <vcalendar>
        <version>2.0</version>
        <prodid>-//Pentabarf//Schedule//EN</prodid>
        <x-wr-caldesc></x-wr-caldesc>
        <x-wr-calname></x-wr-calname>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>ZCKWM3@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-ZCKWM3</pentabarf:event-slug>
            <pentabarf:title>Why UUIDs are Secretly Incredibly Fascinating</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T092000</dtstart>
            <dtend>20241122T095000</dtend>
            <duration>0.03000</duration>
            <summary>Why UUIDs are Secretly Incredibly Fascinating</summary>
            <description>UUIDs are used all over the place, but there are a ton of variants. They&#x27;re theoretically absolutely unique, and yet dozens of companies and projects abandoned the standard to invent their own identifier schemas instead.

Why is that? and why does someone think they&#x27;re interesting enough to talk about at a conference?

Let&#x27;s go down this rabbit whole together, today you&#x27;ll learn:

- why there were five versions of UUIDs in the original spec
- which versions are still useful today, and when you should consider using them
- why, even so, they weren&#x27;t considered fit-for-purpose for many situations
- what&#x27;s being done to fix that
- ~~what&#x27;s the difference between UUID and GUID?~~

I&#x27;ll bet you&#x27;ll find the answers more interesting than you expected to!</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/ZCKWM3/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Tom Eastman</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>79HGSW@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-79HGSW</pentabarf:event-slug>
            <pentabarf:title>A Lazy Person&#x27;s Guide to Building REST Clients or: How I Learned to Stop Worrying and Love Dunder Overrides</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T100000</dtstart>
            <dtend>20241122T103000</dtend>
            <duration>0.03000</duration>
            <summary>A Lazy Person&#x27;s Guide to Building REST Clients or: How I Learned to Stop Worrying and Love Dunder Overrides</summary>
            <description>Early in my Python learning journey I was having to rapidly prototype and implement REST clients for grabbing information. Bored of writing what felt like the same code over and over again, I wanted a more interesting way of solving the problem.

Curious about pythons error handling, and knowing little about magic methods beyond `__init__()`, I stumbled across ways to manipulate attribute access and creation. Spending far to much time diving deeper, I learned how to query REST endpoints without having to define a dedicated method for each call.

Luckily, we can all learn from my abilility to overcomplicate even the simplest tasks. Aimed at users who want to explore class customisation, those who want to add some new problem solving tools to their belt, or anyone wanting to hear how overcomplicating problems can be one of the best learning tools. 

We will touch on:
- What are magic methods, and how you can start using them.
- Why reading the Python reference documentation is useful.
- How to deal with undefined class attributes.
- Creating and implementing callable objects.

While the story and example focus on building a REST client, the concepts presented can be applied to many problems.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/79HGSW/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Ash Bek</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>NLZQAA@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-NLZQAA</pentabarf:event-slug>
            <pentabarf:title>Django on AWS for chump change</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T110000</dtstart>
            <dtend>20241122T113000</dtend>
            <duration>0.03000</duration>
            <summary>Django on AWS for chump change</summary>
            <description>With the power of AWS and the Cloud Development Framework (CDK) we can spin up cheap infrastructure to host Django on. By leveraging cheap and free tier AWS services while also creating some very questionable resources and code we can scale a Django application down to a user base of 2 or less!</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/NLZQAA/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Luke Wiwatowski</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>DQGVLY@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-DQGVLY</pentabarf:event-slug>
            <pentabarf:title>Simplifying Python Web App Operations: Automating K8s Ops with Open Source</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T114000</dtstart>
            <dtend>20241122T121000</dtend>
            <duration>0.03000</duration>
            <summary>Simplifying Python Web App Operations: Automating K8s Ops with Open Source</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/DQGVLY/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>David Andersson</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>M3KJ3V@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-M3KJ3V</pentabarf:event-slug>
            <pentabarf:title>Notes on Over-Engineering: A Project Post-Mortem</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T122000</dtstart>
            <dtend>20241122T125000</dtend>
            <duration>0.03000</duration>
            <summary>Notes on Over-Engineering: A Project Post-Mortem</summary>
            <description>I have a story to share about the pitfalls of over-engineering—a project that resulted in a powerful yet unused Django library for shared database multi-tenancy. This library included automatic tenant-specific querysets, tenant selection middleware, REST framework support, and full test coverage across multiple Python and Django versions. Despite all of its advanced features and the confidence of complete test coverage, it was abandoned before deployment. In this talk, I’ll discuss the journey of this project, from its ambitious beginnings to its eventual demise, highlighting key lessons learned about scope creep, planning pitfalls, and some of the harsh realities of software development.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/M3KJ3V/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Sam Bishop</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>XHM7N7@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-XHM7N7</pentabarf:event-slug>
            <pentabarf:title>Coding Competition Software VS Murphy&#x27;s Law</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T143000</dtstart>
            <dtend>20241122T150000</dtend>
            <duration>0.03000</duration>
            <summary>Coding Competition Software VS Murphy&#x27;s Law</summary>
            <description>Talk sections:

1. Introduction to myself and the Victorian Coding Challenge (5 min)
2. Journey through 4 platform iterations from Replit and Google sites to AWS / React and FastAPI (10 min)
3. Stories about hacks, crashes and making a contest that is at least somewhat immune to chatGPT plagiarism. (10 min)
4. Lessons learned and advice on getting things right with testing and data validation. (5 min)</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/XHM7N7/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Sanjin</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>ACKK3A@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-ACKK3A</pentabarf:event-slug>
            <pentabarf:title>Causal Discovery in Python</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T092000</dtstart>
            <dtend>20241122T095000</dtend>
            <duration>0.03000</duration>
            <summary>Causal Discovery in Python</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/ACKK3A/</url>
            <location>Eureka 2</location>
            
            <attendee>Lizzie Silver</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>WB8HTT@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-WB8HTT</pentabarf:event-slug>
            <pentabarf:title>Verifying and evaluating scientific results with the open source package &quot;scores&quot;</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T100000</dtstart>
            <dtend>20241122T103000</dtend>
            <duration>0.03000</duration>
            <summary>Verifying and evaluating scientific results with the open source package &quot;scores&quot;</summary>
            <description>This talk will introduce &quot;scores&quot;, an open source Python package for verifying and evaluating labelled, n-dimensional (multidimensional) data at any scale. &quot;scores&quot; includes over 50 metrics, statistical techniques and data processing tools.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/WB8HTT/</url>
            <location>Eureka 2</location>
            
            <attendee>Tennessee Leeuwenburg</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>MQQJYE@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-MQQJYE</pentabarf:event-slug>
            <pentabarf:title>Commissioning tools at the Australian Synchrotron, or, how to get a bazillion dollars worth of toys to play nicely together</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T110000</dtstart>
            <dtend>20241122T113000</dtend>
            <duration>0.03000</duration>
            <summary>Commissioning tools at the Australian Synchrotron, or, how to get a bazillion dollars worth of toys to play nicely together</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/MQQJYE/</url>
            <location>Eureka 2</location>
            
            <attendee>Mel</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>9MLDVZ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-9MLDVZ</pentabarf:event-slug>
            <pentabarf:title>Astronomy with Python, for non-astronomers</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T114000</dtstart>
            <dtend>20241122T121000</dtend>
            <duration>0.03000</duration>
            <summary>Astronomy with Python, for non-astronomers</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/9MLDVZ/</url>
            <location>Eureka 2</location>
            
            <attendee>Andrew Williams</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>JV9WT7@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-JV9WT7</pentabarf:event-slug>
            <pentabarf:title>Explore, annotate, and analyse multidimensional image data with napari</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T122000</dtstart>
            <dtend>20241122T125000</dtend>
            <duration>0.03000</duration>
            <summary>Explore, annotate, and analyse multidimensional image data with napari</summary>
            <description>napari is an n-dimensional image viewer for Python. If you’ve ever tried `plt.imshow(arr)` and made Matplotlib unhappy because `arr` has more than two dimensions, then napari might be for you!

The napari canvas can be 2D or 3D. When you give napari an array with more dimensions than the canvas, it will automatically create sliders for those additional dimensions, allowing you to rapidly explore your full data, rather than a few sampled slices.

Image analysis and visualisation involves more than images though: feature detection algorithms result in points, segmentation results in label images, annotation results in shapes such as rectangles or polygons, and more. Napari provides layers that can be displayed on top of each other or side by side, allowing users of Scientific Python to gain a rapid understanding of the algorithms they’re using — where they work well and where they might go wrong.

Sometimes, image analysis algorithms get you this far, but not quite far enough. In such cases, it’s useful to manually curate their output, then continue with downstream steps of an analysis. Napari provides editing tools for its layer types, allowing one for example to add missing points to the output of a peak detection algorithm, remove incorrect ones, paint over incorrect parts of a segmentation, or draw polygons around missed objects of interest. The resulting data points are saved in standard Scientific Python data structures, such as NumPy or Zarr arrays.

This design makes it easy to seamlessly weave together image exploration, image computation, processing, and analysis, and data annotation, curation, and editing.

Napari provides a plugin interface, allowing developers to extend napari’s capabilities, providing users with novel ways to interact with their data. Because napari provides both a library accessible within Python, IPython, and Jupyter, and a standalone executable script, we have found that napari plugins can help collaborators run Python image analysis workflows without needing to launch Python.

In this talk, we&#x27;ll introduce napari’s history, (live) demonstrate the features described above, and discuss current limitations and where we’re going.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/JV9WT7/</url>
            <location>Eureka 2</location>
            
            <attendee>Juan Nunez-Iglesias</attendee>
            
            <attendee>Draga Doncila Pop</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>7DJWKZ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-7DJWKZ</pentabarf:event-slug>
            <pentabarf:title>From Keyword Chaos to Clarity: Conquering a Complex Systematic Review with Python</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T135000</dtstart>
            <dtend>20241122T142000</dtend>
            <duration>0.03000</duration>
            <summary>From Keyword Chaos to Clarity: Conquering a Complex Systematic Review with Python</summary>
            <description>Systematic reviews are the highest form of scientific evidence – the ultimate summary of all existing studies. I started my PhD thinking that finding the right papers to read was just matter of using the right keywords. But then I ended up with over 25,000 research papers – way too many to read or filter with traditional methods. Impossible, right?

Fortunately, I know Python! Come with me on a journey through the challenges of sifting through mountains of research. I dive into how I used Python to automate finding relevant papers for my systematic review, wrestling with PubMed’s quirky download format, using regular expressions to find all the creative ways people refer to childbirth in the literature, and using LLMs to extract information from the abstracts. I’ll also explain why “NOT ‘dog’” didn’t work for me.

This talk is for anyone who’s ever felt lost in a sea of academic papers, or just wants to hear a story of how Python became my secret weapon in the systematic review process.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/7DJWKZ/</url>
            <location>Eureka 2</location>
            
            <attendee>Edwina Mead</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>3JHULA@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-3JHULA</pentabarf:event-slug>
            <pentabarf:title>Data Morph: A Cautionary Tale of Summary Statistics</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T143000</dtstart>
            <dtend>20241122T150000</dtend>
            <duration>0.03000</duration>
            <summary>Data Morph: A Cautionary Tale of Summary Statistics</summary>
            <description>This talk introduces *Data Morph*, a new open source Python package I built that can be used to morph an input dataset of 2D points into select shapes, while preserving the summary statistics to a given number of decimal points through simulated annealing. *Data Morph* extends research from Autodesk to create the [Datasaurus Dozen](https://damassets.autodesk.net/content/dam/autodesk/research/publications-assets/pdf/same-stats-different-graphs.pdf), and is intended to be used as a teaching tool for illustrating why you can’t rely solely on summary statistics. Come learn how it works and what it took to translate the research into an open-source library.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/3JHULA/</url>
            <location>Eureka 2</location>
            
            <attendee>Stefanie Molin</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>XUNCWK@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-XUNCWK</pentabarf:event-slug>
            <pentabarf:title>Leveraging the Rich Spatiotemporal Features of live cell imaging with Machine Learning and AI</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T153000</dtstart>
            <dtend>20241122T160000</dtend>
            <duration>0.03000</duration>
            <summary>Leveraging the Rich Spatiotemporal Features of live cell imaging with Machine Learning and AI</summary>
            <description>Example of the cell death process, called NETosis

https://www.youtube.com/watch?v=SFlcqRajLYE

More details on the technology:

https://www.zeiss.com/microscopy/en/resources/insights-hub/life-sciences/driving-new-discoveries-with-lattice-light-sheet-microscopy-in-an-advanced-core-imaging-facility.html</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/XUNCWK/</url>
            <location>Eureka 2</location>
            
            <attendee>Pradeep Rajasekhar</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>CQDJ9K@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-CQDJ9K</pentabarf:event-slug>
            <pentabarf:title>From minutes to seconds: Capillary auto-alignment with python and opencv</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T161000</dtstart>
            <dtend>20241122T164000</dtend>
            <duration>0.03000</duration>
            <summary>From minutes to seconds: Capillary auto-alignment with python and opencv</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/CQDJ9K/</url>
            <location>Eureka 2</location>
            
            <attendee>Emily Massahud</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>A78TC9@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-A78TC9</pentabarf:event-slug>
            <pentabarf:title>Avocado, Cheese, Grape, Tomato or: How I Used Python to Stop Worrying and Love Emoji in Bioinformatics</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T165000</dtstart>
            <dtend>20241122T172000</dtend>
            <duration>0.03000</duration>
            <summary>Avocado, Cheese, Grape, Tomato or: How I Used Python to Stop Worrying and Love Emoji in Bioinformatics</summary>
            <description>This presentation will delve into the history and recent exciting developments of FASTQE and Biomojify. I will provide some background information on bioinformatics, and outline new developments such as support for new sequencing technologies and expanded emoji customization options. I will also present examples of teaching resources developed using these tools.

As a bioinformatician with over a decade of experience and the main developer of these tools, I would love to share my roadmap and encourage more contributors to join these projects. I’m eager to share my love of bioinformatics with the Python community.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/A78TC9/</url>
            <location>Eureka 2</location>
            
            <attendee>Andrew Lonsdale</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>3GPQDE@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-3GPQDE</pentabarf:event-slug>
            <pentabarf:title>Teaching Digital Technologies in Australian schools with Python and the Kookaberry</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T100000</dtstart>
            <dtend>20241122T103000</dtend>
            <duration>0.03000</duration>
            <summary>Teaching Digital Technologies in Australian schools with Python and the Kookaberry</summary>
            <description>The non-for-profit AustSTEM foundation provides access and assistance to STEM learning
across Australian schools with emphasis on year 5 through to year 7.  AustSTEM has developed
the Kookaberry learning platform which includes a small microcontroller-based board with
a screen, buttons, wireless connectivity, and facility to connect many different
kinds of sensors.  A web-based coding and teaching environment integrates with the
Kookaberry hardware and allows programming in both the visual Blockly language and Python,
with very easy transition between the two.  Teachers also have the option to use a Raspberry
Pi Pico with add-on hardware within this learning platform, making the platform more
accessible and flexible.

Most programming in primary school is based on visual block-based languages like Scratch.
The Kookaberry leverages Blockly to provide a way for students to program physical
hardware (a microcontroller running MicroPython) and interact with the environment through
sensors such as accelerometers, pressure and moisture sensors and light sensors, and interact using
LEDs and motors.  They also learn about data logging and visualising results of experiments
using plots.  This gives students a very hands-on approach to learning to program, which
helps to cement the learning objectives in the curriculum in real-world applications.

Following on from learning to program in Blockly, the Kookaberry platform allows easy
transition to program in Python: the Blocks actually convert directly to Python snippets
and so the students can gradually adapt their existing visual programming skills to
textual coding in Python.

A big part of teaching students is first of all training teachers, and we will discuss
some challenges in this area, and how Kookaberry gives the teachers are given a wide range
of teaching tools so they can adapt the platform to their style.  We will show some lesson
plans, which aim to attract and engage students of all ages and abilities.

As a bonus, the Kookaberry web-app is itself written in Python, and we will describe some
technical details of how it all works.

There will be lots of pictures of kids in action!</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/3GPQDE/</url>
            <location>Eureka 3</location>
            
            <attendee>Damien George</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>YYN7YH@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-YYN7YH</pentabarf:event-slug>
            <pentabarf:title>How Smart is AI? – Real projects to build real understanding</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T110000</dtstart>
            <dtend>20241122T113000</dtend>
            <duration>0.03000</duration>
            <summary>How Smart is AI? – Real projects to build real understanding</summary>
            <description>This talk is designed for teachers, students, or anyone new to AI to get a better understanding of what “AI” is, to see the broad range of technologies “AI” can includes, and to demystify all pieces of terminology like GPT, LLMs, and more!

I’ll demo a light-weight project that you can use to get students leveraging GPT technology through their own code creations. We’ll then add some of our own data to give it specialised knowledge in a technique known as “RAG” (Retrieval Augmented Generation). Through the process of testing out this project we’ll then explore the moments where students can see behind the curtain of what tools like ChatGPT are actually doing, where they fall down and aren’t as “smart” as they seem, and how and when to use AI responsibly. 

This talk will specifically highlight an open-source option for playing with AI in Python so you can get your class coding on these tools for free.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/YYN7YH/</url>
            <location>Eureka 3</location>
            
            <attendee>Renee Noble</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>XHTJ3S@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-XHTJ3S</pentabarf:event-slug>
            <pentabarf:title>Transitioning from VB to Python – Mapping a 6 month journey</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T114000</dtstart>
            <dtend>20241122T121000</dtend>
            <duration>0.03000</duration>
            <summary>Transitioning from VB to Python – Mapping a 6 month journey</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/XHTJ3S/</url>
            <location>Eureka 3</location>
            
            <attendee>Pravin vaz</attendee>
            
            <attendee>Carolyn Gekas</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>WLCHUM@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-WLCHUM</pentabarf:event-slug>
            <pentabarf:title>Enhancing Programming Ability with Playful Learning and Karel</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T122000</dtstart>
            <dtend>20241122T125000</dtend>
            <duration>0.03000</duration>
            <summary>Enhancing Programming Ability with Playful Learning and Karel</summary>
            <description>Beginner programmers often struggle to understand and trace program execution, which is worsened by underdeveloped debugging and testing skills. Beginners may also lack confidence or are easily demotivated, which can hinder learning. To assist students in developing these skills and build confidence we created a set of playful programming challenges and competition using Karel the Robot.

Karel the Robot was developed at Stanford to help students learn programming concepts without the burden of syntax and technicalities of a more general language. Karel provides a 2D ‘grid world’ where the Karel character can move and interact with the environment to carry out various tasks, e.g. walk through a maze. This gives students the opportunity for playful experimentation with code, which helps develop their understanding of programming concepts. Furthermore the 2D world is visualised for students so that they can immediately see how their program changes the environment step by step as well as the final program state. Karel makes the code tangible to the students, which  is in contrast to traditional languages where learners must develop and maintain a mental model of the program state.

Fortunately Karel uses a subset of Python, which allows students to naturally extend their learning to real Python, without learning new syntax. We found that Karel provides a convenient way to implement inductive teaching, which has been shown to enhance student&#x27;s higher order thinking abilities and strengthen their understanding of concepts when compared to deductive teaching.

This talk will cover our approach, preliminary results and feedback from students showing an increase in confidence and interest in programming. We will also share how this approach can be applied to other learning contexts.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/WLCHUM/</url>
            <location>Eureka 3</location>
            
            <attendee>Stephen Tierney</attendee>
            
            <attendee>Alison Wong</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>Z3KYJZ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-Z3KYJZ</pentabarf:event-slug>
            <pentabarf:title>Build Your Own IoT! Fun With Python and Raspberry Pi.</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T135000</dtstart>
            <dtend>20241122T142000</dtend>
            <duration>0.03000</duration>
            <summary>Build Your Own IoT! Fun With Python and Raspberry Pi.</summary>
            <description>This isn&#x27;t your grandfather&#x27;s electronics shop - anyone can collect real-time data with Python! This talk aims to demystify the complex world of data and hardware, with real-world applications for the Western Australian electricity grid.

With the number of IoT devices expected to reach 29 billion by 2030, the significance of real-time data collection continues to grow. In this session, we will construct a basic microscale/hobby scale data collection system designed to serve as the backbone for an IoT application. Specifically, we will create a system to continuously collect voltage readings from a mini solar panel and record the data for future analysis. The system we develop can be easily adapted for different IoT applications.

This talk is designed to be conceptual, requiring only a basic understanding of Python and JSON. Whether you’re a beginner, hobbyist, or professional, join us to explore the exciting world of data and IoT!</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/Z3KYJZ/</url>
            <location>Eureka 3</location>
            
            <attendee>A.J. Fisher</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>KFVD3Z@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-KFVD3Z</pentabarf:event-slug>
            <pentabarf:title>As a Teacher. I have no Time to learn Programming - Streamline Assignment Marking with Python</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241122T143000</dtstart>
            <dtend>20241122T150000</dtend>
            <duration>0.03000</duration>
            <summary>As a Teacher. I have no Time to learn Programming - Streamline Assignment Marking with Python</summary>
            <description>This talk is suitable for Python beginners and the set of Python scripts to automate assignment marking was developed in 2020 when I was teaching at the Hong Kong Baptist University. Each student was marked using standard assessment rubrics stored in an Excel spreadsheet. All the marks of a class of students are then stored in a folder of Excel files. I will demonstrate the automation of the following actions using Python libraries related to Excel such as openpyxl and xlwings.

-Create individual student mark sheets with names and other details filled in
-Check marking mistakes such as missing marks or giving marks above the highest score
-Adjustment of marks in all mark sheets due to errors made in assignment design, etc.
-Collect marks from each individual Excel mark sheet
-Export Excel mark sheets to PDF format for archive purposes

I will also compare the benefits of automating Excel using Python with Excel formulae and Visual Basic for Application by separating programming logic from data. Especially in the light of the Government Cybersecurity initiative &quot;Essential Eight Maturity Model&quot;, Visual Basic for Application should be avoided and Python can be a viable solution.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/KFVD3Z/</url>
            <location>Eureka 3</location>
            
            <attendee>Haggen So</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>MW7E7N@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-MW7E7N</pentabarf:event-slug>
            <pentabarf:title>Making an open source package - lessons learned</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T104000</dtstart>
            <dtend>20241123T111000</dtend>
            <duration>0.03000</duration>
            <summary>Making an open source package - lessons learned</summary>
            <description>Making an open source package is pretty hard in 2024. Expectations are high, and there’s a lot to take into account. I recently developed an open source package. This talk covers what worked, what didn’t work, what I would do again and what I would do differently.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/MW7E7N/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Tennessee Leeuwenburg</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>TWFSTJ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-TWFSTJ</pentabarf:event-slug>
            <pentabarf:title>Serpents and Ducks: wrangling data with Python and DuckDB</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T112000</dtstart>
            <dtend>20241123T115000</dtend>
            <duration>0.03000</duration>
            <summary>Serpents and Ducks: wrangling data with Python and DuckDB</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/TWFSTJ/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Simon Aubury</attendee>
            
            <attendee>Ned Letcher</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>ZEKYUW@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-ZEKYUW</pentabarf:event-slug>
            <pentabarf:title>Performant Python</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T120000</dtstart>
            <dtend>20241123T123000</dtend>
            <duration>0.03000</duration>
            <summary>Performant Python</summary>
            <description>Why, as Python developers, should we care about writing performant code? Python doesn&#x27;t have a great reputation when it comes to performance, but this does not need to be the case!
In this talk we will cover:
- &lt;b&gt;What do you mean by &#x27;Performant&#x27;?&lt;/b&gt; We&#x27;ll talk briefly about the different metrics that can measure the performance of software, and the history of performance in Python.
- &lt;b&gt;Why, Where and When?&lt;/b&gt; Performance should be an important consideration in the code we write and distribute, however performance analysis and improvement can be a time-consuming endevour, so we will look at how to identify where this time is best invested, and why.
- &lt;b&gt;How do I start?&lt;/b&gt; There are many tools available; libraries, IDE extensions, command line tools, and of course, within the Python standard library, so we will explore options and what benefits each provides.
- &lt;b&gt;How do I find issues?&lt;/b&gt; Trying to improve the performance of code is not like regular debugging - we will look at how to use these tools to identify problem areas in the code by looking through some examples.
- &lt;b&gt;How do I fix it?&lt;/b&gt; There&#x27;s always more than one solution to a performance problem. We&#x27;ll look at how our example issues could be mitigated and the pros and cons of varying approaches, including the use of compiled extensions.
- &lt;b&gt;How do I know when I&#x27;m finished?&lt;/b&gt; Is my code performant &lt;i&gt;enough&lt;/i&gt;? Improving performance can be highly iterative, with changes yielding only minor incremental improvements. We will talk about some of the challenges in determining success criteria, and trying to cost estimate performance work.

This talk will touch on some more advanced Python syntax, as well as peeking into how the Python language works, so some basic coding experience is assumed. However, the topics and techniques discussed will be applicable to developers of all levels.

Some things we won&#x27;t cover:
- High-level architecture for high performance systems. This talk will mostly focus on lower-level code structure and syntax.
- C/Rust extensions will not be covered in detail in this talk, however we will take a look at identifying when an extension could be a good fit to solving performance problems, and the pros and cons of this approach.
- In this talk we will focus on the execution time of CPU-bound code as the measure of performance, so we won&#x27;t discuss other performance metrics, such as memory usage or IO traffic.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/ZEKYUW/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Anna Tisch</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>R9ZKZC@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-R9ZKZC</pentabarf:event-slug>
            <pentabarf:title>Let&#x27;s make a working implementation of async functions in Python 2.1, also, why you might want to use a more recent version of Python</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T133000</dtstart>
            <dtend>20241123T140000</dtend>
            <duration>0.03000</duration>
            <summary>Let&#x27;s make a working implementation of async functions in Python 2.1, also, why you might want to use a more recent version of Python</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/R9ZKZC/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Christopher Neugebauer</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>CFS9GH@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-CFS9GH</pentabarf:event-slug>
            <pentabarf:title>What Python Can Learn From Other Languages</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T141000</dtstart>
            <dtend>20241123T144000</dtend>
            <duration>0.03000</duration>
            <summary>What Python Can Learn From Other Languages</summary>
            <description>From PHP autolaoders to Goroutines, there&#x27;s many features in the world of programming languages that Python lacks. This talk will outline many features from other language communities that could be used both to improve existing codebases and, more deeply, to improve and evolve Python itself.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/CFS9GH/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Noah Kantrowitz</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>GF3NJK@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-GF3NJK</pentabarf:event-slug>
            <pentabarf:title>Failsafes and Safety Fails: How to crash a train and other lessons for software engineers</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T145000</dtstart>
            <dtend>20241123T152000</dtend>
            <duration>0.03000</duration>
            <summary>Failsafes and Safety Fails: How to crash a train and other lessons for software engineers</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/GF3NJK/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Jack Skinner</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>JD8WMZ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-JD8WMZ</pentabarf:event-slug>
            <pentabarf:title>AI perceptions of gender</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T104000</dtstart>
            <dtend>20241123T111000</dtend>
            <duration>0.03000</duration>
            <summary>AI perceptions of gender</summary>
            <description>My PhD subject was AI perceptions of gender. I will take you through my key findings, my artwork projects created to explore this topic and how that research has progressed today in the days of generative AI. I will explore perception theory, gender theory and art all using AI to show why gender is fundamentally misunderstood by machine learning systems and ask the question why are we still letting machines assign gender to us?</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/JD8WMZ/</url>
            <location>Eureka 2</location>
            
            <attendee>J. Rosenbaum</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>Q78MDT@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-Q78MDT</pentabarf:event-slug>
            <pentabarf:title>Embeddings: How Computers Learned to Read</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T112000</dtstart>
            <dtend>20241123T115000</dtend>
            <duration>0.03000</duration>
            <summary>Embeddings: How Computers Learned to Read</summary>
            <description>Artificial Intelligence, Large Language Models, and Machine Learning have revolutionized our ability to automate complex tasks that once required significant human time and effort. But how do machines, which fundamentally operate on binary code, achieve such remarkable feats? The answer lies in embeddings - a powerful concept at the heart of modern AI. Embeddings are the bridge between human-understandable information and the numerical language of computers. They allow us to represent complex data - whether it&#x27;s text, images, or even abstract concepts - as dense vectors of numbers. In this presentation, we&#x27;ll demystify embeddings and give you a practical and intuitive understanding of how they work.

We&#x27;ll dive into:  
1. What are embeddings and how they enable machines to process and understand human language
2. How you can create your own embeddings or utilise existing embedding models to encode language in Python
3. How embeddings underpin LLMs 

By the end, you&#x27;ll have a solid grasp of this fundamental AI concept and be equipped to start experimenting with embeddings in your own projects.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/Q78MDT/</url>
            <location>Eureka 2</location>
            
            <attendee>Liam Bluett</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>LGDUVR@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-LGDUVR</pentabarf:event-slug>
            <pentabarf:title>ML ain’t your only hammer: adding mathematical optimisation to the data scientist’s toolbox</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T120000</dtstart>
            <dtend>20241123T123000</dtend>
            <duration>0.03000</duration>
            <summary>ML ain’t your only hammer: adding mathematical optimisation to the data scientist’s toolbox</summary>
            <description>What do you do if the problem you want to model has little or no clean and available historic data? Or, what if you do have historic data, but things have changed so much that it is no longer possible to use that data to make predictions about the future? On top of that, what if you want your model to incorporate hard constraints that it cannot violate, and these constraints can lead to extremely different modelled outcomes?

Many data scientists would recognise that for these kinds of problems, most machine learning algorithms tend to struggle. However, it is precisely for this reason that the field of mathematical optimisation (MO) was developed. Despite flying relatively under the radar in the data science community, MO plays a critical role solving problems in multiple sectors. The airline industry for example, is so dependent on MO for plane and workforce scheduling, that an entire fleet of planes will be grounded if a bug prevents one of these models solving.

In this presentation, we will introduce the audience to the field of mathematical optimisation, and the types of problems it is exceptionally good at solving. We’ll build a simple model together, and explore how different the approach is to developing a machine learning model. By the end of this talk, we hope many members of the audience will be able to map MO to a problem they are actively trying to solve, and they will be excited to explore applying this technique.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/LGDUVR/</url>
            <location>Eureka 2</location>
            
            <attendee>Dr Jack Simpson</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>HMWPGH@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-HMWPGH</pentabarf:event-slug>
            <pentabarf:title>Introducing Potnia: A Python language library for the conversion of ancient texts to Unicode</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T133000</dtstart>
            <dtend>20241123T140000</dtend>
            <duration>0.03000</duration>
            <summary>Introducing Potnia: A Python language library for the conversion of ancient texts to Unicode</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/HMWPGH/</url>
            <location>Eureka 2</location>
            
            <attendee>Emily Tour</attendee>
            
            <attendee>Kabir Manandhar Shrestha</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>9KD9HJ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-9KD9HJ</pentabarf:event-slug>
            <pentabarf:title>Cultural and Linguistic Influences on Translation: A Study of Novels</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T141000</dtstart>
            <dtend>20241123T144000</dtend>
            <duration>0.03000</duration>
            <summary>Cultural and Linguistic Influences on Translation: A Study of Novels</summary>
            <description>Our project aims to find out how closely translations preserve the original meaning and style of text, whether the sentiment expressed in the original text is consistently preserved across different translations, and how sentiment analysis results vary for the same text in different languages. 

As such, we have chosen novels based on different genres and societies, so that we can analyse words in various contexts. We have also chosen our novels based on the languages we are analysing, making sure we include books that are originally written by both languages and other languages. 

In this project, we created several study groups of languages. For instance, we might put English with Mandarin Chinese together, so that we can analyse different language families. In each language group, we will assign source and target language, and find the translation patterns within the group. To generalise translation patterns, we repeated the analyses on multiple books and across multiple language groups. Then, we applied feature extraction to extract semantic, stylistic, syntactic and sentiment features from translations of novels. And lastly, to apply sentiment preservation by applying sentiment analysis and comparative semantic analysis to generalise language features in translation. 

This project is important to us because we are both students from multilingual backgrounds and interact with translations every day. We realised that the same articles translated into different languages may not necessarily bring out the same ideologies or sentiments. Therefore, we are interested in how translation of a text will vary in different contexts, and whether the language family plays a big role in this. We believe this project is important as it can impact how one would understand particular historical, cultural or societal knowledge of a community if not done well. 

We considered the differences in translation styles when translated by different authors, as well as different editing styles. To conquer this, we analysed works from different authors and translators to minimise the impact of stylistic differences.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/9KD9HJ/</url>
            <location>Eureka 2</location>
            
            <attendee>Anneysha Sarkar</attendee>
            
            <attendee>Eliz So</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>YNDDJR@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-YNDDJR</pentabarf:event-slug>
            <pentabarf:title>Walking the Tree of Life – Adventures in Phylogenetics</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T145000</dtstart>
            <dtend>20241123T152000</dtend>
            <duration>0.03000</duration>
            <summary>Walking the Tree of Life – Adventures in Phylogenetics</summary>
            <description>I&#x27;ve always been interested in zoology – my dad has a degree in zoology – and over the past year or two, I&#x27;ve started learning more about phylogeny. Phylogeny is the study of the evolution of species, seeking to understand their common ancestors, when and how they branched, and how closely related various species are.

A common tool in phylogeny is the cladogram, a &quot;tree of life&quot; showing the different relationships between species. Cladograms are a great tool for understanding a family of organisms. However, when I started wanting to explore cladograms myself, I couldn&#x27;t find anything that had all the features I wanted. This led me to start building it myself, and as I did so, I started thinking that maybe it was something that scientists and educators might find useful.

And so I dove into the problem with gusto, and built a cladogram tool that could do it all, and is nice and user friendly, and great for students of all ages. In this talk I&#x27;ll explain what I wanted it to do, the saga of trying to work out if it already existed, and how I built the tool. I&#x27;ll also show you where you can access it to try out yourself and maybe learn something interesting about your favourite animal!</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/YNDDJR/</url>
            <location>Eureka 2</location>
            
            <attendee>Jack Reichelt</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>MBZSKZ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-MBZSKZ</pentabarf:event-slug>
            <pentabarf:title>Where am I? What am I doing? Mobile App development in Python</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T104000</dtstart>
            <dtend>20241123T111000</dtend>
            <duration>0.03000</duration>
            <summary>Where am I? What am I doing? Mobile App development in Python</summary>
            <description>The BeeWare project provides the tools to build a native, cross-platform app for Android and iOS, using nothing but Python. In this talk, you&#x27;ll learn how to use the tools provided by BeeWare, including Briefcase to bootstrap and deploy an app; and Toga to build GUI and access platform-native APIs. You&#x27;ll learn about how to manage the device permissions required to access hardware; and you&#x27;ll get a brief introduction to how you can access APIs for which Toga doesn&#x27;t provide a cross platform API.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/MBZSKZ/</url>
            <location>Eureka 3</location>
            
            <attendee>Russell Keith-Magee</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>CERBXC@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-CERBXC</pentabarf:event-slug>
            <pentabarf:title>from seeds import plants: using IoT to grow healthy herbs</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T133000</dtstart>
            <dtend>20241123T140000</dtend>
            <duration>0.03000</duration>
            <summary>from seeds import plants: using IoT to grow healthy herbs</summary>
            <description>With the current climate crisis and the rise of households growing their own fruits, vegetables and herbs, the efficient use of potable water is crucial now more than ever. However, the majority of plant watering systems are either manual or time based - that is, they water plants on a pre-defined schedule. 

This talk will:
- show Core Electronics&#x27; plant_io system that was used to grow alfalfa seeds based off soil moisture and give a foundation introduction to the MicroPython code,
- explore some hardware extensions made to the base system to collect further environmental data based off additional IoT sensors,
- describe some other software and hardware extensions made to the base system to allow remote monitoring and data analysis, and
- propose directions for future research.

This talk would be of interest to people with an interest in horticulture, Internet of Things devices, MicroPython and Raspberry Pi programming as well as data analysts.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/CERBXC/</url>
            <location>Eureka 3</location>
            
            <attendee>Anthony I. Joseph</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>HFXFLZ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-HFXFLZ</pentabarf:event-slug>
            <pentabarf:title>MicroPython: The best bits!</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T141000</dtstart>
            <dtend>20241123T144000</dtend>
            <duration>0.03000</duration>
            <summary>MicroPython: The best bits!</summary>
            <description>There’s no question; C and C++ are the 800 pound gorillas of the embedded domain. But MicroPython provides a high-level language alternative in this space and, in addition to modern syntax, it also provides unique features that can _vastly_ improve the embedded development experience. Which - let’s be honest! - has _barely improved_ in decades.

So, let’s take a look at some of those features! 

For starters, there’s the live REPL. We’ll look at how to use the REPL and why having an immediate way to interact with your device is an indispensable tool. 

Python’s `asyncio` is well-supported in MicroPython and, it turns out, is a very good fit for embedded devices. We’ll look at what makes it such a good fit - and how we can apply libraries like `aioble` and `aiorepl` to accelerate development.

To manage a connection to your MicroPython device, the core team provides the official tool, `mpremote`. We’ll cover some of the useful features it provides and explain how to integrate them into a workflow that allows rapid development.

Although it’s a high-level language, MicroPython balances providing access to low-level features in an accessible way. We’ll briefly touch on using such features as the PIO, RMT, USBDevice and register access. From there we’ll shift to discuss some of the performance optimisation features such as inline assembly, frozen code and the viper and native emitters.

To wrap up, we’ll look at how _freakin’ useful_ it is to be able to run MicroPython on x86 (and even in a browser!).

There’s a lot to cover but these features can really help level-up embedded development!</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/HFXFLZ/</url>
            <location>Eureka 3</location>
            
            <attendee>Matt Trentini</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>8UXYBS@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-8UXYBS</pentabarf:event-slug>
            <pentabarf:title>Wait, is Wi-Fi just blinking lights?</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241123T145000</dtstart>
            <dtend>20241123T152000</dtend>
            <duration>0.03000</duration>
            <summary>Wait, is Wi-Fi just blinking lights?</summary>
            <description>Wi-Fi systems are complicated beasts with several layers, each solving a little piece of the overall wireless communication puzzle.

At the most basic level, there are radio frequency transmitters and receivers. Transmitters are little lights that can be turned on and off at several different colors and intensities, but with frequencies so low our eyes can&#x27;t see. Conversely, receivers are just little 360° cameras, that like our eyes can only see a small spectrum of colors, but again in colors we can&#x27;t see.

On top of that, if two computers want to communicate they must plot and agree upon a common scheme for how to blink their own lights, and how to change their colors and intensities so that they know what each other mean when they see specific light patterns. This is not unlike Morse code, but using more ways of conveying information other than just short and long blinks.

Even though that forms the basis of being able to communicate, there are still several other layers on top, since the scheming computers must also agree on things such as to when to turn off their transmitters so their cameras are not blinded by their own lights as they are trying to listen to their peers, how to identify to whom the messages are going if there are multiple peers, how to secretly encode messages such that only peers in the same network can see it, and how to deliver messages from and to the Internet.

Using Python and RP2040 microcontrollers, we can build little lights and cameras and implement a fully working version of a wireless communication system, with the extra benefit we can actually watch the lights and see what it looks like when computers are talking.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/8UXYBS/</url>
            <location>Eureka 3</location>
            
            <attendee>Felipe Tavares</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>LYLY7H@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-LYLY7H</pentabarf:event-slug>
            <pentabarf:title>Quantifying Nebraska</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T103500</dtstart>
            <dtend>20241124T110500</dtend>
            <duration>0.03000</duration>
            <summary>Quantifying Nebraska</summary>
            <description>(Almost) every Python project depends on packages, which depend on packages, which depend on packages, How do we find the ones that might need our help?

Spoiler alert: there&#x27;s no perfect quantification. (At least to my knowledge.)

But given that, how can we use tooling designed for supply chain security — SBOMs, scorecards, code forge metrics — and use those to identify the packages that we depend upon that may be at risk, that are load bearing for our projects, and that we might be able to help in ways that are more targeted than just throwing money at the problem?

(Although, also, throwing money at problems can be useful. Just saying.)

There&#x27;s lots of talk of making supply chains more secure. Let&#x27;s make sure we also make them more sustainable as well.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/LYLY7H/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Adam Harvey</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>P7UKEN@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-P7UKEN</pentabarf:event-slug>
            <pentabarf:title>Dependency management: the cause of—and solution to—all supply chain problems</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T111500</dtstart>
            <dtend>20241124T114500</dtend>
            <duration>0.03000</duration>
            <summary>Dependency management: the cause of—and solution to—all supply chain problems</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/P7UKEN/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Nicky Ringland</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>LALLKX@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-LALLKX</pentabarf:event-slug>
            <pentabarf:title>The perfect setup? Not setup.py! Building packages the right way</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T115500</dtstart>
            <dtend>20241124T122500</dtend>
            <duration>0.03000</duration>
            <summary>The perfect setup? Not setup.py! Building packages the right way</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/LALLKX/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Caleb Brown</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>ZGCQSY@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-ZGCQSY</pentabarf:event-slug>
            <pentabarf:title>Setting Up Your Python Community for Success: Lessons from the Melbourne Python User Group</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T133000</dtstart>
            <dtend>20241124T140000</dtend>
            <duration>0.03000</duration>
            <summary>Setting Up Your Python Community for Success: Lessons from the Melbourne Python User Group</summary>
            <description>The Melbourne Python User Group has always aimed to be a cornerstone of the local Python community, providing a platform for Python enthusiasts to learn, share, and collaborate. In this session, we will delve into the strategies and practices that have contributed to our group&#x27;s success, along with successes from other meetups that have been managed in the past which offer valuable insights for anyone looking to build or enhance their own Python community.

We will begin by exploring the foundational principles of community building, emphasizing the importance of inclusivity, diversity, and continuous learning. Attendees will learn how to create an environment that welcomes newcomers and encourages participation from all skill levels, ensuring a rich and supportive community culture.

Next, we will discuss the logistics of organizing meetups and events. This includes selecting engaging topics, securing knowledgeable speakers, and leveraging various formats such as talks, workshops, and coding sprints. We will share our experiences in coordinating these events, highlighting both successes and challenges, and providing practical tips for smooth execution.

One of the key components of a tech community&#x27;s vibrancy is the focus on hackathons and collaborative projects. We will detail the process of planning and running hackathons that inspire creativity and innovation, from ideation to execution. Additionally, we will showcase some of the impactful projects that have emerged from these events, illustrating the potential of collaborative efforts to drive the open-source ecosystem forward.

The session will also cover the importance of fostering connections within the community and beyond. We will share strategies for building partnerships with local tech companies, educational institutions, and other user groups, creating a network of support and resources that benefits all members.

By the end of this session, attendees will have a comprehensive understanding of the best practices for building and sustaining a thriving Python community. They will leave with actionable insights and inspiration to apply these principles within their own contexts, whether they are starting a new user group or looking to revitalize an existing one.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/ZGCQSY/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Renaldi Gondosubroto</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>MVAF7U@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-MVAF7U</pentabarf:event-slug>
            <pentabarf:title>How we used Python to try and save lives</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T141000</dtstart>
            <dtend>20241124T144000</dtend>
            <duration>0.03000</duration>
            <summary>How we used Python to try and save lives</summary>
            <description>At one point before Google switched to suck, they let a bunch of us try to save the world. And mapvisage, person finder, crisismap? All in Python (ok there was some JavaScript and even Flash involved). Having your Python on Appengine site embedded on the front page of pretty much every news site on earth? Quite a lot to cope with.

After another time I had to stop building a coffee table to run upstairs to task satellites. As you do on a weekend, get home from IKEA, start assembling and go oops need ask people to point their flying space robot cameras at this bit of the world. Normal weekend.

And I will eventually finish my book.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/MVAF7U/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Anthony Baxter</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>UKK9K9@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-UKK9K9</pentabarf:event-slug>
            <pentabarf:title>Lowering the Gangplank: How Writing Songs Relates to Templating</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T145000</dtstart>
            <dtend>20241124T152000</dtend>
            <duration>0.03000</duration>
            <summary>Lowering the Gangplank: How Writing Songs Relates to Templating</summary>
            <description>This talk will including me singing live on stage and audience participation will be encouraged!</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/UKK9K9/</url>
            <location>Goldfields Theatre</location>
            
            <attendee>Chelsea Finnie</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>8HBU3Z@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-8HBU3Z</pentabarf:event-slug>
            <pentabarf:title>Using Multiple Databases in Django Applications</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T103500</dtstart>
            <dtend>20241124T110500</dtend>
            <duration>0.03000</duration>
            <summary>Using Multiple Databases in Django Applications</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/8HBU3Z/</url>
            <location>Eureka 2</location>
            
            <attendee>Artem Kolesnikov</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>9ZRRJY@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-9ZRRJY</pentabarf:event-slug>
            <pentabarf:title>How to confirm that the index you added actually improves query performance</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T111500</dtstart>
            <dtend>20241124T114500</dtend>
            <duration>0.03000</duration>
            <summary>How to confirm that the index you added actually improves query performance</summary>
            <description>Within my current role on the performance team, it is my responsibility to investigate sources of and solutions to poor database performance within our company&#x27;s application. Understanding the how and why of database indexes has been an important part of this, however, my knowledge of database indexes is a relatively recently gained experience. In this talk I aim to share what I have learnt along the way as applied to investigating why an index added in Django was not improving the performance of our database query.

&lt;b&gt;Database Indexes&lt;/b&gt;
Here, I explain what database indexes are and why we use them. I go through the main ways to add database indexes using Django ORM and migrations. Then, I demonstrate query plans and how to generate the query plans for the SQL queries that are created.

&lt;b&gt;Introducing the example&lt;/b&gt;
The main way I learnt about indexes was via debugging a particular issue.  I introduce an example where we use django orm to search a partial match on a string field. This partial match did not use the pre-existing index that was already in the table. This example is used to contextualise the rest of the talk.

&lt;b&gt;Django ORM to SQL&lt;/b&gt;
Django ORM can be a convenience for converting models within code into queries, however, sometimes the queries produced can be less intuitive than expected. I demonstrate the SQL queries produced by the example above and demonstrate why this query using &#x27;LIKE&#x27; did not get any speed-up by using the indexes already available on this table.

&lt;b&gt;Trigram Indexes&lt;/b&gt;
I introduce trigram indexes and demonstrate the improvements in query cost for the example above we can gain by adding a trigram index instead.

&lt;b&gt;Repeat the process for changing to case-insensitive search&lt;/b&gt;
As an extension to this, a new feature request required that the search be case insensitive. I reveal the proposed change to the Django ORM query, the generated SQL and demonstrate how a new index is required if this change is made.

Finally, I will summarise what I have learnt within my adventures in Database index analysis and share some useful resources for further learning in the areas of postgres database performance.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/9ZRRJY/</url>
            <location>Eureka 2</location>
            
            <attendee>Suzannah Cooper</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>UKJB7J@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-UKJB7J</pentabarf:event-slug>
            <pentabarf:title>Follow the Postgres brick road: a journey of testing against a real database server</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T115500</dtstart>
            <dtend>20241124T122500</dtend>
            <duration>0.03000</duration>
            <summary>Follow the Postgres brick road: a journey of testing against a real database server</summary>
            <description>We follow the usual approach for building an application: store data in a database. Our method is SQLAlchemy models in our Python code, and migrations to evolve the schema. 

We also have the usual desire for these applications: they should work, and *continue* to work as we make changes. One key method is automated tests.

Managing both of these at once is surprisingly subtle, but it&#x27;s also good to solve: no-one likes having behaviour in production be a surprise because a test made incorrect assumptions about how the database behaves.

I’ll walk us along our database testing trail, stopping in at attractions like (not) using SQLite, ensuring migrations and models match, efficiently instantiating databases with the right schemas, isolated and parallel execution, and even optimising how each individual tests runs.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/UKJB7J/</url>
            <location>Eureka 2</location>
            
            <attendee>Huon Wilson</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>C37SMX@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-C37SMX</pentabarf:event-slug>
            <pentabarf:title>Django, REST and OpenAPI - a gentle introduction</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T133000</dtstart>
            <dtend>20241124T140000</dtend>
            <duration>0.03000</duration>
            <summary>Django, REST and OpenAPI - a gentle introduction</summary>
            <description>This talk will primarily cover two packages:
- django-rest-framework, or &#x27;DRF&#x27; for short, for providing a REST API
- drf-spectacular, for providing an OpenAPI schema for that API
It will include real world examples for how these things work and attendees can also try out the REST interface and OpenAPI schema the talk is based on.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/C37SMX/</url>
            <location>Eureka 2</location>
            
            <attendee>Paul Wayper</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>S7E8T7@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-S7E8T7</pentabarf:event-slug>
            <pentabarf:title>Three Django Apps in a Trenchcoat: Writing an event management website with not a lot of time</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T141000</dtstart>
            <dtend>20241124T144000</dtend>
            <duration>0.03000</duration>
            <summary>Three Django Apps in a Trenchcoat: Writing an event management website with not a lot of time</summary>
            <description>In the last weekend of April this year, I helped to run Star Trek: Survival (https://startreksurvival.tech), a STEM-focussed, Star Trek-themed scout camp for all ages, 5 to 26 years. This talk will be about the software I wrote, including a registration system, the Star Trek Survival main website, and a system called RadioActiv8, which is used to keep track of where everyone is across the campsite, and send them to activities when there is capacity to do so. All of this was combined into a single project for maximum integration and ease of use.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/S7E8T7/</url>
            <location>Eureka 2</location>
            
            <attendee>Matt Cengia</attendee>
            
            <attendee>Luke Byrnes</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>B8RJPR@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-B8RJPR</pentabarf:event-slug>
            <pentabarf:title>Space Django: Migrating and Redesigning a Database while Hunting for Satellites.</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T145000</dtstart>
            <dtend>20241124T152000</dtend>
            <duration>0.03000</duration>
            <summary>Space Django: Migrating and Redesigning a Database while Hunting for Satellites.</summary>
            <description>The presentation has three main goals; (1) show how the database that we had before was limiting the development of new products and, in the medium-term, would be a potential issue to scale; (2) present some of the options we considered and the tradeoffs; (3) the strategy we chose and how we implemented it (main challenges and how the combination of OOP and Django’s ORM actually speed up not only the process but made it easier).</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/B8RJPR/</url>
            <location>Eureka 2</location>
            
            <attendee>Artur Baruchi</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>QTWAGZ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-QTWAGZ</pentabarf:event-slug>
            <pentabarf:title>Better dataframes</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T103500</dtstart>
            <dtend>20241124T110500</dtend>
            <duration>0.03000</duration>
            <summary>Better dataframes</summary>
            <description>The talk will provide context and guidance for deciding which dataframe library to choose for your next project. It will also explain the best ways to offer cross-dataframe support in your library code.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/QTWAGZ/</url>
            <location>Eureka 3</location>
            
            <attendee>Ed Schofield</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>U3YKPB@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-U3YKPB</pentabarf:event-slug>
            <pentabarf:title>Rethinking Data Catalogs: The Promise and Pitfalls</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T111500</dtstart>
            <dtend>20241124T114500</dtend>
            <duration>0.03000</duration>
            <summary>Rethinking Data Catalogs: The Promise and Pitfalls</summary>
            <description></description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/U3YKPB/</url>
            <location>Eureka 3</location>
            
            <attendee>Harmeet Sokhi</attendee>
            
            <attendee>Vishal Srivastava</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>DQPW7L@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-DQPW7L</pentabarf:event-slug>
            <pentabarf:title>Adding File System context to pathlib</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T115500</dtstart>
            <dtend>20241124T122500</dtend>
            <duration>0.03000</duration>
            <summary>Adding File System context to pathlib</summary>
            <description>Pathlib has become the de facto standard to pass file system paths
around, which is kinda weird as the only real thing it&#x27;s going go for
it is a tiny bit of syntactic sugar.

Paths are a bit of an odd duck, as their literal form is very close to
their object form.

But there are extra bits of context around a path that matter, such as
following symlinks, and junctions, how to handle case when matching
file names.

I became interested in the idea of embedding some of this knowledge
inside the path object, and seeing if that led to a clean up of the
API, can we avoid having all these file system, implementation
specific flags in our API, and instead encapsulate them within our
path objects?

A lot of work has been done in the last few releases to make pathlib
extensible, so that paves the way for trying API experiments like
this.

Often when you get an idea, it rattles around in the brain like a
buzzing bee. With Python you can throw it up on the &quot;ideas&quot; forum and
get it shot down quickly.

Or Not..</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/DQPW7L/</url>
            <location>Eureka 3</location>
            
            <attendee>Clinton Roy</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>WYZEUQ@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-WYZEUQ</pentabarf:event-slug>
            <pentabarf:title>With Xonsh use Python as your shell: No more switching between shell and Python syntax!</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T133000</dtstart>
            <dtend>20241124T140000</dtend>
            <duration>0.03000</duration>
            <summary>With Xonsh use Python as your shell: No more switching between shell and Python syntax!</summary>
            <description>In this talk I cover what Xonsh is, how you can use it to simplify your day-to-day work and how I have employed Xonsh to solve some sysadmin problems in a safer way. This talk is aimed at both Python beginners and experts who spend time in the terminal.

### 1. What is Xonsh

[Xonsh](https://xon.sh) is A shell in Python -- and Python in a shell. All [open source](https://github.com/xonsh/xonsh) and cross platform.

Here I give an overview of the basics: Command execution similar to bash -- All strings are Python strings! -- Access to environment variables &amp; aliases, but in consistent Python syntax -- Loops &amp; control flow as well as know from Python.

### 2. How you can use it

Use case for *beginners*: You are starting out with Python? While writing your code you want to check a construct you are unsure of? Just jump into your shell -- if it is Xonsh! (A hands-on example here.)

Use case for *experts*: You know Python inside out? Don&#x27;t switch to another language with weird syntax when doing shell work -- use Xonsh! (A hands-on example here.)

### 3. What I have done with it

I have been working with Xonsh for over 5 years and over this time it has essentially replaced Bash for me. I will give hands-on examples of how it can help you to do everyday tasks.

For example, I use Xonsh to move, copy or delete files selectively and safely: (1) Assign a globbing result to a Python variable, (2) quickly check that the variable really contains the files you wanted to select, (3) then issue `rm @(variable)` and you are sure the correct files are deleted.

I also employ Xonsh for reusable scripts: Need to handle command line parameters? In Xonsh I use simple Python syntax to access and iterate over them -- you can even use high-level Python CLI libraries like Click.

### 4. And more!

Customise Xonsh to your heart&#x27;s content (flexible prompt config and many plugins called &quot;Xontribs&quot;) -- Search a powerful history -- Ask a very helpful community and a reasonable big user base.

Finally. we have to talk about some disadvantages Xonsh has: You cannot blindly copy Bash command lines straight from the Internet - And: Xonsh is mature, but not as mature as Bash (rough edges around exception behaviour, etc).

All in all, Xonsh is a lot of fun and gives us Pythonistas less headaches than switching in the terminal always to Bash or Powershell!</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/WYZEUQ/</url>
            <location>Eureka 3</location>
            
            <attendee>Leo Broska</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>NFZKYP@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-NFZKYP</pentabarf:event-slug>
            <pentabarf:title>Time and Time Again</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T141000</dtstart>
            <dtend>20241124T144000</dtend>
            <duration>0.03000</duration>
            <summary>Time and Time Again</summary>
            <description>This talk will occur at a specific location - that is usually easy enough to understand - and also at a specific time and date. What that time and date actually means is part of a large and complex system of rules and exceptions and changes, which is also only understood by specific cultures or valid in specific regions.

These systems can appear to be simple, but failing to get it right can result in anything from cultural insensitivity to a full-on systems failure.

Join us for a look at time itself, in which we will:
- try to understand what this &quot;time&quot; thing actually is
- explore different ways that time is represented and communicated
- understand different calendar systems and how they interact
- learn how to build more resilient and culturally sensitive computer systems</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/NFZKYP/</url>
            <location>Eureka 3</location>
            
            <attendee>Yaakov</attendee>
            
        </vevent>
        
        <vevent>
            <method>PUBLISH</method>
            <uid>WCUHJ8@@pretalx.com</uid>
            <pentabarf:event-id></pentabarf:event-id>
            <pentabarf:event-slug>-WCUHJ8</pentabarf:event-slug>
            <pentabarf:title>Turtles all the way down: Abstractions and when we should use them</pentabarf:title>
            <pentabarf:subtitle></pentabarf:subtitle>
            <pentabarf:language>en</pentabarf:language>
            <pentabarf:language-code>en</pentabarf:language-code>
            <dtstart>20241124T145000</dtstart>
            <dtend>20241124T152000</dtend>
            <duration>0.03000</duration>
            <summary>Turtles all the way down: Abstractions and when we should use them</summary>
            <description>Abstractions are rife in programming. You might even say they are the way we build meaning into our systems. But often when faced with a problem, we reach for a new container to neatly package it up and make it a solution. Sometimes this works, but most of the time, the problem either immediately leaks out, or over time seeps out into nearby containers, contaminating them along the way.

This talk is about describing different types of abstraction (helpful and not-so-helpful), what they look like, and how to design a helpful one. In the end you will have a few new ways to think about when and how to create abstractions and possibly a mental guide to building (or not building) your own.</description>
            <class>PUBLIC</class>
            <status>CONFIRMED</status>
            <category>Talk</category>
            <url>https://pretalx.com/pycon-au-2024/talk/WCUHJ8/</url>
            <location>Eureka 3</location>
            
            <attendee>Mark Lakewood</attendee>
            
        </vevent>
        
    </vcalendar>
</iCalendar>
