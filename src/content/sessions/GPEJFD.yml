title: 'Demystifying Python AsyncIO: A Real-World Approach'
start: 2023-08-20 11:55:00+09:30
end: 2023-08-20 12:25:00+09:30
room: b
track:
type: talk
abstract: "<p>Maybe it's just me, but I hate stupid examples. I hate reading about
  OOP with animal examples as much as I hate reading about async with the client using
  bare asyncio.sleep statements. Mostly because (considering you won't work for a
  zoo ü§∑‚Äç‚ôÇÔ∏è) these examples will never get any close to real life. I don't want to
  start talking about the solution (i.e. async), I want you to feel the problem first,
  I want you to run things locally from your own computer. So, in this talk, I want
  then to explore async by using examples that you can run yourself and understand.
  So, the plan is to learn:\n- What are sync and async processes with a real word
  example\n- Where to use Sync and Async \n- Why and why not use Sync and Async\n
  - Basic syntax and Usage of async in Python\n- Explore async with slow HTTP queries\n
  - Explore async with slow Database queries\n- Share a real project running in production
  that uses async</p>"
description: "<p>I noticed some people using the async syntax without knowing what
  they were doing. First, they think async is parallel which is not true. Then they
  write code that doesn't take any advantage of Python async. In other words, they
  write sync code with async syntax. The goal of this talk is to point out these performance
  issues and help you benefit the most from async code.</p>\n<h3>ü§î When to use Python
  Async</h3>\n<p>Async only makes sense if you're doing IO. There's ZERO benefit in
  using async to stuff like this that is CPU-bound. Your code might even get slower
  by doing that due to the Event Loop. That's because Python async only optimizes
  IDLE time!. IO-bound operations are related to reading/writing operations.\nA good
  example would be:\n- Requesting some data from HTTP\n- Reading/Writing some json/txt
  file\n- Reading data from a database</p>\n<p>üëÜ All these operations consist of waiting
  for the data to be available.\nWhile the data is UNAVAILABLE the EVENT LOOP does
  something else.\nThis is Concurrency.\nNOT Parallelism.</p>\n<p>So In this talk,
  we will dive into the world of synchronous and asynchronous processes with real-world
  examples that you can run on your own computer. We'll start by understanding the
  difference between synchronous and asynchronous processes and where to use each
  one. We'll explore the benefits and drawbacks of both sync and async processes to
  help you make informed decisions in your own projects.</p>\n<p>We will then move
  on to explore the basic syntax and usage of async in Python, including how to create
  and run async functions. We will also discuss common pitfalls and best practices
  for using async in your code.</p>\n<p>Next, we will take a deep dive into async
  with slow HTTP queries and slow database queries, showing you how async can help
  optimize your code and improve performance in these scenarios. We will provide real-world
  examples that you can run yourself, so you can see the benefits of async firsthand.</p>\n
  <p>Finally, we will share a real project running in production that uses async,
  giving you a glimpse into how async can be used in a real-world scenario. By the
  end of this talk, you'll have a solid understanding of async and how it can be used
  to optimize your code and improve performance in a variety of scenarios.</p>"
code: GPEJFD
speakers:
- PZFRSS
cw:
youtube_slug:
